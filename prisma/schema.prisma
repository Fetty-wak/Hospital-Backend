// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========== ENUMS ==========

enum LabResultStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum DiagnosisStatus {
  PENDING
  COMPLETED
}

enum InvitedRoles {
  DOCTOR
  LAB_TECH
  PHARMACIST
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
  LAB_TECH
  PHARMACIST
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodType {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  SYSTEM
  APPOINTMENT
  DIAGNOSIS
  PRESCRIPTION
  DOCTOR_UPDATE
  PHARMACIST_UPDATE
  LABTECH_UPDATE
  LAB_RESULT
  DEPARTMENT_UPDATE
  OTHER
}

enum DosageForm {
  TABLET
  CAPSULE
  SYRUP
  INJECTION
  CREAM
  OINTMENT
  DROPS
  SUPPOSITORY
  SPRAY
  OTHER
}

enum PrescriptionStatus{
  PENDING   
  CANCELLED
  DISPENSED
}

// ========== MODELS ==========

// USER MODEL
model User {
  id                  Int            @id @default(autoincrement())
  email               String         @unique
  password            String
  fullName            String
  role                Role           @default(PATIENT)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  isActive            Boolean        @default(true)

  // Relations
  patient             Patient?
  doctor              Doctor?
  labTech             LabTech?
  pharmacist          Pharmacist?
  inbox               Notification[] @relation("Inbox")
  outbox              Notification[] @relation("Outbox")
  cancelledAppointments  Appointment[]  @relation("CancelledByUser")
  createdAppointments Appointment[]  @relation("CreatedByUser")
  updatedAppointments Appointment[]  @relation("UpdatedByUser")
  inviteCodes         InviteCode[]
}

// PATIENT MODEL
model Patient {
  id           Int       @id
  address      String
  phoneNumber  String    @unique
  allergies    String?
  gender       Gender
  bloodType    BloodType
  dateOfBirth  DateTime

  // Relations
  user         User        @relation(fields: [id], references: [id])
  appointments Appointment[]
  diagnoses    Diagnosis[]
}

//LAB TECHNICIAN MODEL
model LabTech {
  id           Int      @id             // same as User id
  phoneNumber  String   @unique
  departmentId Int
  isVerified   Boolean  @default(false)
  pendingUpdate Boolean @default(false)
  startDate     DateTime @default(now())

  // Relations
  user         User      @relation(fields: [id], references: [id])
  labResults   LabResult[]
  department   Department @relation(fields: [departmentId], references: [id])
}

// DOCTOR MODEL
model Doctor {
  id                Int       @id
  phoneNumber       String    @unique
  licenseNumber     String    @unique
  isVerified        Boolean   @default(false)
  practiceStartDate DateTime
  departmentId      Int
  pendingUpdate     Boolean   @default(false)
  startDate         DateTime  @default(now())

  // Relations
  user              User       @relation(fields: [id], references: [id])
  department        Department @relation(fields: [departmentId], references: [id])
  appointments      Appointment[]
  diagnoses         Diagnosis[]
}

//PHARMACIST MODEL
model Pharmacist {
  id  Int       @id 
  phoneNumber  String    @unique
  departmentId Int
  isVerified   Boolean   @default(false) //changed by admin
  pendingUpdate Boolean  @default(false)
  startDate     DateTime @default(now())

  //relationships
  user          User          @relation(fields: [id], references: [id])
  department    Department    @relation(fields: [departmentId], references: [id])
  prescription Prescription[]
}

//INVITE CODE MODEL FOR SPECIAL ROLES SIGNUPS
model InviteCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  role      InvitedRoles
  expiresAt DateTime?
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  createdBy Int       // admin id

  //Relations
  creator   User      @relation(fields: [createdBy], references: [id])
}


// DEPARTMENT MODEL
model Department {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  isActive Boolean   @default(true)

  // Relations
  doctors  Doctor[]
  labTechs LabTech[]
  pharmacists Pharmacist[]
}

// APPOINTMENT MODEL
model Appointment {
  id           Int               @id @default(autoincrement())
  date         DateTime
  status       AppointmentStatus @default(PENDING)
  patientConfirmed  Boolean @default(false)
  doctorConfirmed   Boolean @default(false)
  patientId    Int
  doctorId     Int
  reason       String
  updateReason String? //only filled when user updates appointment
  outcome      String? //only filled upon completion
  createdBy    Int
  cancelledBy  Int? // only filled upon cancellation
  updatedBy    Int? // only filled when user updates appointment
  createDiagnosis Boolean @default(false)

  // Relations
  patient      Patient     @relation(fields: [patientId], references: [id])
  doctor       Doctor      @relation(fields: [doctorId], references: [id])
  cancelUser   User?       @relation("CancelledByUser", fields: [cancelledBy], references: [id])
  createdUser  User        @relation("CreatedByUser", fields: [createdBy], references: [id])
  updatedUser  User?       @relation("UpdatedByUser", fields: [updatedBy], references: [id])
  diagnosis    Diagnosis?
}

// DIAGNOSIS MODEL
model Diagnosis {
  id            Int      @id @default(autoincrement())
  symptoms      String?  //filled by the doctor
  prescribed    Boolean  @default(false)
  requiresLabTests  Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String?  // filled by doctor either during or post creation
  outcome       String?  // filled upon diagnosis completion
  doctorId      Int
  patientId     Int
  status DiagnosisStatus @default(PENDING)
  appointmentId Int?     @unique
  completedAt   DateTime? //filled upon completion

  // Relations
  doctor        Doctor        @relation(fields: [doctorId], references: [id])
  patient       Patient       @relation(fields: [patientId], references: [id])
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  prescriptions Prescription[]
  labresults    LabResult[]
}

//LAB TESTS MODEL
model LabTest {
  id        Int       @id @default(autoincrement())
  name      String    @unique       // e.g., "Complete Blood Count", "Chest X-Ray"
  code      String?   @unique       // optional standardized code (like LOINC)
  description String
  available  Boolean  @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  labResults LabResult[]
}

//LAB RESULTS MODEL
model LabResult {
  id          Int       @id @default(autoincrement())
  labTechId   Int?       //lab technician filling the data
  diagnosisId Int
  labTestId   Int       // type of test being performed
  status      LabResultStatus @default(PENDING)
  result      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cancellationReason  String? // only filled if labResult is cancelled

  // Relations
  diagnosis   Diagnosis @relation(fields: [diagnosisId], references: [id])
  labTest     LabTest   @relation(fields: [labTestId], references: [id])
  labTech     LabTech?   @relation(fields: [labTechId], references: [id])
}

// PRESCRIPTION MODEL
model Prescription {
  id              Int       @id @default(autoincrement())
  diagnosisId     Int
  drugId          Int
  dosePerAdmin    Int       // 2 tablets
  frequencyPerDay Int       // 3 times per day
  durationDays    Int       // 5 days
  instructions    String?
  status          PrescriptionStatus  @default(PENDING)

  dispensed       Boolean   @default(false)
  dispensedAt     DateTime? //only filled after dispensement
  pharmacistId    Int? //also filled by the pharmacist in charge

  diagnosis Diagnosis @relation(fields: [diagnosisId], references: [id])
  drug      Drug      @relation(fields: [drugId], references: [id])
  pharmacist Pharmacist? @relation(fields: [pharmacistId], references: [id])
}


//DRUGS MODEL
model Drug {
  id          Int    @id @default(autoincrement())
  name        String
  description String?
  dosageForm  DosageForm
  available   Boolean @default(true)
  strength    String   // e.g. 500mg, 5ml/100mg

  // relationships
  prescriptions Prescription[]
}


// NOTIFICATION MODEL
model Notification {
  id           Int              @id @default(autoincrement())
  type         NotificationType
  message      String
  isRead       Boolean          @default(false)
  createdAt    DateTime         @default(now())
  initiatorId  Int
  recipientId  Int       
  eventId      Int?   //this is the id of whatever triggered the notification
  status       String
  errorMessage String? //filled if notification generation fails  

  // Relations
  initiator    User             @relation("Outbox", fields: [initiatorId], references: [id])
  recipient    User             @relation("Inbox", fields: [recipientId], references: [id])
}
